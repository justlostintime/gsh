#CompileError

C
'This function provides a way for applications to creating compile errors.<br>
'The script processing may be terminated when called.<br>
'One of two things will happen:\
'+ If The halt parameter is true then an Error.raise() will halt the process.\
'+ Otherwise the error will be added to the error event queue and then control is returned to the calling program.\
'\
'Public Sub _Call(sPath As String, iLine As Integer, sMessage As String, [HaltCompile as boolean])
_Call
M

(sPath)s(iLine)i(sMessage)s[(HaltCompile)b]
'Called by application to report an error and call error.raise<br>
'Iline is the program line in error.<br>
'sMessage is the message attached to the error being raised<br>
'sPath is the path to the file containing the error
#CompileErrorMsg

C
'This object is returned when an application receives a Compile error event\
'or when an application reads from the compile error queue **ScriptCompileErrors**.
LineNumber
v
i

'The line number the error occured on
FileName
v
s

'The name of the file that the error occured in
Position
v
i

'The position of the line that the error occured
Message
v
s

'The error message returned by the compiler
msgType
v
s

'Error type field
text
v
s

'The original message returned by the compiler
_new
m

(ErrorAsText)s
'New object CompileErrorMsg created
'Sample input  "MMain.module:7:7: error: Unknown identifier: Prints\n"
#Reader

C
'This class is the primary method of processing scripts or plugin source code.\
'Reader will take in a file path or text buffer and create a fully tokenized
'script source object.\
'\
'It handles all includes, and source code reading,
'it is the engine which handles all Pre/Post Processing and Alias processing.\
'\
'To use this class instantiate it with the following formats:<br>
'<p style="margin-left: 40px">
'<code>
'+ Private MyReader as object = new reader() ' reads from stdin
'+ Private MyReader as object = new reader(Null, MyFilePath)\
'+ Private MyReader as object = new reader(Null, "MyScriptName",MyScriptAsString)
'</code></p><br>
'In each case the object returned is the fully processed script ready to
'be compiled, or used by the application.<br>
'Reader also contains a number of functions which may be used to quickly
'access and manipulate the resultant set of tokens.
ScriptFilter
V
Collection

'List of Plugin objects for filtering gambas keywords and functions.\
'The Table uses regular expresions to process the script.\
'This is Applied before each line is processed.\
'\
'See ScriptApplyFilter for details.\
'\
ScriptAlias
V
Collection

'List of aliases applied to each source line before it is processed
'Aliases are macro's and parameterized macros.
'The macro substitution is done just before a line is processed by read.
'\
'See ScriptApplyAlias for details.
'\
PreProgramPlugins
V
Object[]

'List of Pre Process Plugin objects for entire Program\
'The  object in the array should have the following interface:\
'public sub PreProcessProgram(Program as string[]) as string[]\
'This function is expected to update the provided Script text array.\
'\
'See ScriptApplyPreProgPlugins for details.\
'\
PreLinePlugins
V
Object[]

'List of functions to be called before a line of Script Text is processed<br>
'The object in the array should contain the following interface:\
'public sub PreProcessLine(ProgramLine as string) as string\
'The function is expected to return the updated line of script.\
'\
'See ScriptApplyLinePlugins for details.\
PostProgramPlugins
V
Object[]

'List Functions to be called after the Script is processed by Reader<br>
'Each object in this array should have the following interface:<br>
'public sub PostProcessProgram(Program as string[],Symbols as variant[][],Types as variant[][],Positions as variant[][])
'The Source code array is passed by refrence and the post process object is expected to alter the content of the array.
'\
'See ScriptApplyPostProgPlugins for details.\
'\
ProgramLines
v
String[]

'Contains the list of fully processed program lines
ProgramSymbols
v
Variant[]

'Contains the list of Symbol arrays for each program line
ProgramTypes
v
Variant[]

'Contains the type arrays for each sysmbol in each program line
ProgramPositions
v
Variant[]

'Contains the arrays of positions for each program line
GlobalItemPosition
v
Integer[]

'Contains a list of positions of every global code block and variable/structure.\
'This can be used to find Eash class definition and it's location in the  in a script.
_sSourceFile
v
s

rText
C
i
0
'The Type of information returned for a token\
'rText - Text line when MyReader\[Line\] is accessed\
'rTokens - Symbol when MyReader\[Line,SymbolIndex\] is accessed\
'rTypes  - Symbol Type when MyReader\[line,SymbolIndex,Reader.rtypes\] is accessed\
'rPosition - the position of the Symbol in the original Script text MyReader\[Line,SymbolIndex,Reader.rPosition\]
rTokens
C
i
1
'The Type of information returned for a token\
'rText - Text line when MyReader\[Line\] is accessed\
'rTokens - Symbol when MyReader\[Line,SymbolIndex\] is accessed\
'rTypes  - Symbol Type when MyReader\[line,SymbolIndex,Reader.rtypes\] is accessed\
'rPosition - the position of the Symbol in the original Script text MyReader\[Line,SymbolIndex,Reader.rPosition\]
rTypes
C
i
2
'The Type of information returned for a token\
'rText - Text line when MyReader\[Line\] is accessed\
'rTokens - Symbol when MyReader\[Line,SymbolIndex\] is accessed\
'rTypes  - Symbol Type when MyReader\[line,SymbolIndex,Reader.rtypes\] is accessed\
'rPosition - the position of the Symbol in the original Script text MyReader\[Line,SymbolIndex,Reader.rPosition\]
rPosition
C
i
3
'The Type of information returned for a token\
'rText - Text line when MyReader\[Line\] is accessed\
'rTokens - Symbol when MyReader\[Line,SymbolIndex\] is accessed\
'rTypes  - Symbol Type when MyReader\[line,SymbolIndex,Reader.rtypes\] is accessed\
'rPosition - the position of the Symbol in the original Script text MyReader\[Line,SymbolIndex,Reader.rPosition\]
_New
m

[(cContext)Context;(SourceFile)s(Sourceprogram)s]
'This is the primary way to create a reader object<br>
'If called from user application context should be set to null<br>
'a simple example of using this may be:<br>
'Dim myReader As New Reader(Null, "MyScript", "for i as integer = 0 to 10\nprint \"hello\";; i\nnext")\
'Print "execute reader returned script"<br>
'ScripterExecute("NewScript", myReader.GetProgram())
GetStdio
m
s

Types
m
Integer[]
[(index)i]
'Get the type for each symbol of the current program line. <br>
'This is for use by user application to process a script.
Positions
m
Integer[]
[(index)i]
'Get the list of position for each token in a line.<br>
'This is for use by user application to process a script.
UseList
m
s

'Returns the list of components and libraries used by the script
Eof
m
b

'Indicates that there are no more Program lines to process.<br>
'This is for use by user application to process a script.
advance
m
String[]

'Advance to next code line and return the next lines symbols in the script being processed.<br>
'This is for use by user application to process a script.
NextToken
m
s

'return the next token in the program
'This is for use by user application to process a script.
backToken
m


'Backup or unget the last token in the line.<br>
'This is for use by user application to process a script.
back
m

[(count)i]
'Back one token in the script if needed  backup a line.<br>
'This is for use by user application to process a script.
Text
m
s
[(index)i]
'Get the text of the current program line.<br>
'This is for use by user application to process a script.
Tokens
m
String[]
[(index)i]
'Get the tokens/symbols for the current program line.<br>
'This is for use by user application to process a script.
_get
m
v
(index)i[(SubIndex)i(Setof)i]
'Allows reader to act as an array of symbols/types and positions.<br>
'to get the a line from the source:<br>
'Myreader[2] ' get second line<br>
'To get a token from a line
'MyReader[2,3] ' return the 3rd token on the 2nd line<br>
'to get the type for a token:<br>
'MyReader[2,3,reader.rType]
'This is for use by user application to process a script.
_next
m
String[]

'It is possible to enumerate over each lines symbols
'reader.key will always contain the current source line number.<br>
'The enumeration returns a table of symbol for the current source line.<br>
'This is for use by user application to process a script.
IsMainDefined
m
b

'Return true if a main function or _Call function was defined in the script
HasBlocks
m
b

'Returns true if the script contains blocks of code<br>
'as classes, forms, Modules, Connection, WebForm, WebPage, structures, public definitions of functions which are
'Outside of a class or module definition.
HasPublicOrSub
m
b

'Return true if script contains Public or Sub definition.
getBlocks
m
Collection

'Returns the list of positions of block within the script
GetProgram
m
s

'Returns the final program in text format
'This is ready to be passed to the project
'Directory as the Main or _Call module or class
DisplayWarnings
m


'In some cases warning are accumulated when a main is not defined.<br>
'These are the definition of things which would be faster if main was defined.<br>
'This will print those warning to the console.
#Script

C
'This Component Is For compiling And running Gambas scripts.\
'Providing a similar interface As Used With a  Process Class and extending this interface with script specific \
'methods for Compiling the script, Formatting Script Parameters, sending and ''' receiving data.\
'\
'Direct management Of the  EXEC for starting the script process, and Process management are available thru:\
'\
'The  Cmd property may be used to directly manage execution via EXEC.\
'The  Process property may be used by the user to directly access the process of a script which is running.\
'\
'Once a Script has been compiled it is possible to access any of the #Script properties as if they are a member of the
'Script object e.g. if MyScript.Version = "0.0.1" then ......
'These properties are read only
Version
R
s

WaitBlocks
C
b

'used to define a blocking wait on script.wait()
WaitNonBlocking
C
b
T
'used to define a NonBlocking wait on script.wait()
Process
r
Process

'Process associated with the script
:CompileErrors
:

(ErrMsg)CompileErrorMsg;
'Raised when a compile error happens, if returns true then raise.error, else return false for bad compile
:Read
:

(Pid)Process;
'Raised when there is data to be read from the standard output of the process. Passes Process object
:Kill
:

(Pid)Process;
'Raised when the process has terminated, normally or abnormally. Passes process object
:Error
:

(Error)s(Pid)Process;
'Raised when there Is Data To be Read On the standard Error Output Of the process.
'Unlike the Event Process.Read(gb) Event , you receive the data via the Error parameter rather than using, For example, Line INPUT.
'Passes the process object
LastState
r
i

'
LastValue
r
i

Blocking
p
i

'Returns Or sets If the stream Is Blocking.
'When this Property is set, reading From the stream will block If there Is Nothing To Read ,
'And writing To the stream will block when, For example, the internal system buffer Is Full.
ByteOrder
p
i

'Returns or sets the byte order used to read or write binary data to the stream.
'<a href="wiki://comp/gb/stream/byteorder>ByteOrder</a>
EndOfFile
r
b

'This Property signals whether the Last Use Of Line Input reached the End Of file, instead Of reading a full Line With an End - Of - Line character.
'To check If End Of file has been reached In any context, Use the Eof function Or the Stream.Eof(gb)property.
EndOfLine
p
i

'Return Or set the newline separator used by this stream.
'The possible values are:
'gb.Unix For lines separated by Chr$(10).
'gb.Windows For lines separated by Chr$(13) & Chr$(10).
'gb.Mac For lines separated by Chr$(13).
Eof
r
b

'Return If a stream reached its end.
'It 's an equivalent of the Eof function.
Handle
r
i

'Returns the process identifier (a.k.a "pid") of the process object.
ID
r
i

'wiki://comp/gb/process/handle
Ignore
p
b

'Return Or set If the process Is Ignored.
'+ If this Property is False(the Default ), Then the interpreter will Not Quit Until that process ends.
'+ If this Property is True, the interpreter will Kill the process when it quits.
IsTerm
r
b

'Return if a stream is associated with a terminal.
Lines
r
v

'Returns a virtual object that allows you to enumerate a stream line by line.
NullTerminatedString
p
b

'Return or set if strings are null-terminated when they are serialized.
state
r
i

'Returns the current state of the process object: Process.Stopped (gb), Process.Running (gb) or Process.Crashed (gb).
Tag
p
v

'Returns Or sets the tag associated With the stream.
'This Property is intended For the programmer And Is Never used by the component.It can contain any Variant value
Term
r
v

'Return a virtual object that allows to manage the terminal associated with the stream.
Value
r
i

'Returns the value returned by the process when it exited, or the number of the emitted signal if it crashed.
Cmd
r
String[]

'String[] containing the Command and parameters that can be passed directly to exec
Name
p
s

'Assign a script name used by String Buffer compile
SourceFile
p
s

'Assign a script file name to be compiled
Text
p
s

'provide the script source code as a buffer
CompileOptions
p
String[]

'List of scripter compile option see Scripter document
Warnings
p
b

'Turns on the display of warning to the console
Verbose
p
b

'Turns on verbose information printed during the compile
NoCache
p
b

'Causes Scripter to always compile the script, ignores the cache
Fast
p
b

'Causes to compiler to produce a fast executable
PrintListing
p
b

'Enable listing upon error
OutputArchiveLocation
p
s

'Put the generated executable in a specific location not the cache directory
_new
m

[(ScriptName)s(ScriptSource)s]
'Creates and compiles a new script object from a source file defined by ScriptName.\
'OR\
'if the ScriptSource is defined use ScriptName as the cache name and compile the ScriptSource text.\
'OR\
'If nothing is provided then return with initialized object, compile nothing.
Compile
m
b
[(Options)String[];]
'Compile the Script defined By SourceFile Or Text.\
'\
'Options - pass an array Of compile parameters that overrides all script compile option properties.\
'\
'Returns True On good compile.\
'\
'If an Event handler Is Present Then returns False On bad compile And raises the CompileErrors Event passing a CompileErrorMsg To the Event handler.\
'\
'If no Event handler present Then Raise an Error With the compile Error text.\
'If an Error was raised Then ScriptCompileErrors contains the CompileErrorMsg.\
'\
'Scripts only have to be compiled once and can be executed may times.
_call
m
Process
[(ScriptName)s(ScriptSource)s]
'Assign the file or buffer to be built to the script object
'after it has been created.\
'OR\
'If called with no parameters then return the process object if it exists
'else throws a 'no process' error.
_property
m
b
.
'Named interface for #Script variables
_unknown
m
v
.
'Handle the #Script properties before they are compiled
SaveAsProject
m
v
(DestinationDirectory)s
'Save the Script and convert it to a project, All pre and post processing is performed on the Script.
'Dest Provides the destination Directory
'The Script Path or Name and text must be defined before calling this.\
'Returns the path to the new project if succeeds\
'Returns null otherwise
Save
m

[(DestinationDirectoryPath)s]
'Saves the content of the Text property to the\
'Directory Specified by DestinationDirectoryPath using the\
'Name Property as the name of the file.\
'If no path is specified it uses the Name property as the destination path.
LoadFromProject
m
b
(SourceDirectory)s[(TestPlugin)b]
'Load a Project into a script\
'The SourceDirectory is required\
'When complete:\
'Text will contain the Script\
'Name will Contain the original project name not the path.\
Load
m

[(SourceFileNamePath)s]
'Loads the content of the specified file to the Text property\
'and sets the Name File name portion of the path provided\
'if no path is provided then the Script is loaded from Name property.
wait
m

[(NonBlocking)b]
'Wait for the script to complete execution\
'Specify optionally if process will block all other events or allow other events while waiting for process to complete"\
'Defaults to a non blocking process.
CloseInput
m


'Close the input side of the pipe
Begin
m


'Begin data buffering until send() is called
Close
m


'Close the send and recieve pipe to the script
'Same as the Close stream
Drop
m


'Drop all data in the send buffer since the last Begin() call
Kill
m


'Kills the Script immediately.
readline
m
s
[(escape)s]
'Read a line of text from the stream, like the LINE INPUT instruction.\
'If Escape is specified, then newlines between two Escape characters are ignored.
'@{tip}This method is very useful when reading CSV files.
send
m


'Send all the data, in one shot, since the last call to [Stream.Begin (gb)](wiki://comp/gb/stream/begin).
Watch
m

(Mode)i(bWatch)b
'Start Or Stop watching the stream file descriptor For reading Or writing, after it has been opened.\
'Mode Is The Watch type:\
'+ gb.Read For watching For reading.\
'+ gb.Write For watching For writing.\
'Watch Is TRUE To enable the Watch , False To disable it.
run
m
i
.
'Starts execution of the script wait for the script to complete.\
'Return the exit code of the Script process.\
'Any number or type of argument may be passed to the script at execution time.\
'Arrays may be passed and will be expanded/converted to inline string elements.\
'Objects, Collections and Structures can not be used here.\
'See RunGetResponse for parameter details.\
'\
'Example:\
'      Dim MyScript as new script("ThisScript","Print application.name")
'      MyScript.run(1,2,3,4,5)
'      print MyScript.Value
'\
'Alternatively:\
'       Dim MyScript as new script("ThisScript","Print application.name")
'       Exec MyScript.Cmd wait
'       print process.lastvalue
RunNoWait
m
Process
.
'Starts Execution of the script and continue without waiting for it to complete.
'Any number or type of argument may be passed to the script at execution time.
'Arrays may be passed and will be expanded/converted to inline string elements.
'Objects, Collections and Structures can not be used here.
'See RunGetResponse for parameter details.
RunGetResponse
m
v
.
'Start execution and return response from script.\
'Any number or type of argument may be passed to the script at execution time.\
'Arrays may be passed and will be expanded/converted to inline string elements.\
'Objects, Collections and Structures can not be used here. \
'All arguments are translated to their string form and passed to the Script.\
'The only advantage Of using this method Of starting the Script this way is the auto conversion Of the
'parameters.
'\
'      Dim myArray As String[] = ["this", "that", Done "]"
'      Dim MyFloat As Float = 4.3
'      MyResult = MyScript.RubGetResponse(1, 2, myvar, 4, "this text", MyFloat, MyArray)
'\
'Alternatively\
'\
'      MyResult = Exec MyScript.cmd.insert([Str(1), Str(2), Str(myVar), Str(4), "this Text", Str(MyFloat)).insert(myArray)
RunReadWrite
m
Process
.
'Starts Execution of the script exits with I/O setup to script.\
'Any number or type of argument may be passed to the script at execution time.\
'Arrays may be passed and will be expanded/converted to inline string elements.\
'Objects, Collections and Structures can not be used here.\
'See RunGetResponse for parameter details.\
'Generates a Read event  with the Process of the sender when data arrives from the Script.\
'\
'Examples:\
'      MyScript as Script
'      MyScript = new Script("ThisScript","Print \"Hi\"") as "MyReader"
'      MyScript.runReadWrite(1,2,3,4)
'
'      public sub MyReader_Read( Pid as process)
'          dim buffer as string
'          buffer = read #pid, -lof(pid)
'          print buffer
'       end
'Alternatively:\
'      MyScript as Script
'      MyScript = new Script("ThisScript","Print \"Hi\"") as "MyReader"
'      MyProcess as process
'      MyProcess = Exec MyScript.cmd for read write as "MyReader"
'
'      public sub MyReader_Read()
'          dim buffer as string
'          buffer = read #Last, -lof(Last)
'          print buffer
'       end
_ScriptIO_read
m


_ScriptIO_kill
m


_ScriptIO_error
m

(ErrMsg)s
write
m

(Value)v[(length)l]
'This function should be used to send data to the script process.\
'Any type of value may be sent. Objects must have a _write special method.\
'Alternatively it is possible to use the process property to send data.\
'Information is sent as:
'[[
'Value Type
'--
'Write Type
'==
'Objects
'--
'**write #process, value as object**
'==
'Strings
'--
'**write #process, value**
'==
'If Length included
'--
'**write #process, value, length**
'==
'anything else
'--
'**write #process, value as variant**
']]
Read
m
v
[(length)l]
'This function can be used to read string data from the script process when a read event occurs.\
'Returns all data available from the process by default.\
'If a length is provided then up to the length of data requested is read.\
'Example:
'      buffer = MyScript.read()
'For more flexibility Use the following method instead.\
'Examples\
'      buffer = Read #MyScript(), -lof(MyScript())
'      number = Read #MyScript() as integer
#ScriptApplyAlias

C
'This module will apply each alias in the alias table to the provided data.\
'An alias is a textual substitution on the first element of the provided data\
'if a match is found the text is replaced with the defined alias.\
'Aliases may be parameterized, and the definition may contain multiple line\
'See ScriptSetAliasTable for table format details
_init
M


_Call
M
String[]
(Data)s(aliaslist)Collection;
'Apply each element of the aliastlist to the data 
#ScriptApplyKeywordFilter

C
'Apply the keyword filter to the passed in source line<br>
'This is an initial implementation, should maybe allow some sort of
'call to plugins or such, but for now just a bunch of 
'regular expressions.<br>
'Will causes a compile error if any of the filters matches source line
'This will only return if no matches are found.<br>
'This is a separate module so as not to load the gb.prc module if not used by the scripter.<br>
'This is expensive the first time a plugin script is processed but of course does not<br>
'effect the cached plugins that have been created, as they are not processed again.
_init
M


_Call
M
b
(sLine)s(KeywordPatternTable)Collection;(iLine)i(sPath)s
'Called to apply all Filter patterns to a source line
#ScriptApplyLinePlugins

C
'Apply each of the Line level Plugins\
'listed in the line Plugin table to the provided program\
'See ScriptSetPreProcessPlugin for more details regarding
'the table format.\
'This function is also called by the reader.Tokenize before tokenizing the
'script line.\
'\
'Public Sub _call(sLine As String) As String\
'\
'Apply each of the entries in the PreLinePlugins table
'to the code line provided.
'Return the updated text.
_call
M
s
(sLine)s
'Apply each of the entries in the PreLinePlugins table
'the the code line provided
#ScriptApplyPostProgPlugins

C
'Apply each of the Program level Post process Plugins<br>
'listed in the Post Program  Plugin table to the provided program.\
'The Script source is provided as a string[] array to be processed.\
'See ScriptSetPostProcessPlugin for table details.\
'This function is also called by reader.tokenize After each file is included into
'the source which will be compiled.\
'**NOTE:**\
'> When This plugin changes a script line it must also update the Symbol,\
'> Type and position arrays for this line by calling highlight for the line\
'> and updating the related entries.\
'> This is only important if there is more that one Post Process plugin.\ 
'\
'Public Sub ScriptPostProgPlugins(sProgram As String\[\], \[ProgramSymbols As String\[\]\[\], ProgramTypes As Integer\[\]\[\], ProgramPositions As Integer\[\]\[\]\])\
'\
'Apply the Post Process Program level Plugins\
'sProgram is an array of script lines.\
'ProgramSymbols, is an array of string arrays of sysmbols, One element per program line\
'ProgramTypes is an array of arrays of symbol types. One element per program line\
'ProgramPositions is an array of arrays of the position of eash symbol in the program line\
'Returns nothing, Plugin may modify collections\
_call
M

(sProgram)String[];[(ProgramSymbols)String[][];(ProgramTypes)Integer[][];(ProgramPositions)Integer[][];]
'Apply the Post Process Program level Plugins<br>
'sProgram is an array of script lines.<br>
'ProgramSymbols, is an array of string arrays of sysmbols, One element per program line<br>
'ProgramTypes is an array of arrays of symbol types. One element per program line<br>
'ProgramPositions is an array of arrays of the position of eash symbol in the program line<br>
'Returns nothing, Plugin may modify collections<br>
#ScriptApplyPreProgPlugins

C
'Apply each of the Pre Program Plugins in the PreProgramPlugins table\
'to the provided string[] array.\
'Any Changes in the array are carried into the script compile process\
'See: ScriptSetPostProcessPlugin for details<br>
'This function is also called by the reader.tokenize process before it begins to compile
'any included or source script.
_call
M
String[]
(sProgram)String[];
'Apply the Pre Process Program level Plugins<br>
'sProgram is an array of script lines.
#ScriptCompileErrors

C
'This module Accumulates the error messages as they are generated\
'It is activated when Scripter is used as a plugin.\
'It acts as a first in last out queue.\
'This module also provided the ability to enable and disable console\
'listing when an error occurs.\
'This class may be enumerated and referenced as an array.\
'Returns an object of type **CompiledErrorMsg**\
'Examples:\
'     ' returns the next error from the top of the queue
'     Dim MyErr as CompileErrorMsg = ScriptCompileErrors()
'OR:
'     for each e as CompileErrorMsg in ScriptCompileErrors
'            print e.text
'     next
_CompileErrors
V
Variant[]

'Hidden List of compile errors
_PrintListing
V
b

'Flag that manages the listing display
_call
M
v
.
'Return the next error from the stack if no parameters\
'Places each parameter onto the error stack when provided, returns null
_put
M

(value)v[(index)v]
'Add an error to the stack
_get
M
v

'Again return the next error from the stack 
'return null if nothing else
EnableListing
M


'Enable Scripter to print error listing if compile fails
'when running as a component
DisableListing
M


'Disable Listing When error occurs when running
'as a component. This is the default setting
Clear
M


'Clear all error messages
_next
M
v

'allow to iterate over all the errors
'each iteration removes an element from the array
'And returns it. 
#ScriptListing

C
'Provides the ability to create a listing of a script from a script contained in a string buffer
'with the ability to display errors when required.\
'If called without error information, only a simple listing is returned.\
'Otherwise it generates an error listing and returns it as a string formatted
'with line numbers, and a ^ with the error message under the error line.\
'
'Public Sub **ScriptListing**(**TheScript** As String, Optional **ErrorText** As String = "",\
'<p style="margin-left: 100px"> **ErrorLineNumber** As Integer = 0, **ErrorAtPosition As Integer** = 0) As String</p>\
'
'* A Simple example:
'<p style="margin-left: 40px">
'<code>
'   Dim AListing as String = ScriptListing("For i as integer=0 to 10\nPrint \"Hello World\"\nNext\n",2,11,"Not World Earth")
'</code></p><br>
'* Would create a Listing containing:
'<p style="margin-left: 40px">
'<code>
'    1   For I as integer = 0 to 100\
'    2   "Hello World"\
'    ..............^ Not World Earth\
'    3   Next\
'</code></p><br>
_call
M
s
(TheScript)s[(ErrorText)s(ErrorLineNumber)i(ErrorAtPosition)i]
'Create a listing from a script source, optionally with errors
#ScriptPreProcess

C
'This function will process any compiler #Script options.\
'It Verifying if they are valid most entries are project file information.\
'Type - type of script Component, library or blank for script\
'Version - Version number of the script\
'Description - of the script \
'Maintainer- of this script\
'Author or Authors  - of this script\
'Vendor - vendor name\
'License - defaults to version 2\
'Title - title of this script. will be the form title by default for GUI scripts\
'Name - name of the script\
'Startup - the startup class of the script\
'Include - include a file into the project directory useful for creating a project from a script\
'Property - define a user specific property for a script - only valid for plugins \
'\
'For plugins all Project information entries become read only properties of the plugin generated class.\
'This interface may be called to add  properties to the property table before a script is compiled.\
'\
'This is called for each line of a script starting with #Script when a script is compiled.\
'\
'Some Examples\
' #Script      type="Library"\
' #Script      Vendor="mycompany"\
' #Script      Version="1.0.3"\
' Only for Plugins define any extra properties needed\
' These properties are read/write\
' #Script      Property=MyProp:"MyPropValue"\
' Example: #Script Property=TAG:"MoveMotor "\
isLibrary
V
b

'Indicates that the Script being processed is a library
isComponent
V
b

'Indicates that the Script being processed is a component
isInstall
V
b

'Indicates that the Script being processed is Install
hasVendor
V
b

'Indicates that the Script being processed has a vendor
hasAuthor
V
b

'Indicates that the Script being processed has a vendor
hasVersion
V
b

'Indicates that the Script being processed has an Author
hasOptions
V
b

'Indicates that the Script being processed has Options Defined
PublicFiles
V
String[]

'Each entry in this table will copy a file to the project directory
'will be refrenced in the code by name only
'Primarily used when converting a script to a project
ProjectInfo
V
Collection

'Is a list of read only the Properties associated with the plugin Script
PropertyRW
V
String[]

'Is a list of read/write properties associated with the plugin script
_init
M


reset
M


'Reset all fields back to default
_call
M

(aSymbols)String[];(aTypes)Integer[];(LineNumber)i(sPath)s
'Script Preprocessor entries  will look like this:<br>
'#Script name="xxxx"<br>
'#Script startup="MySub"<br>
'#Script Version ="0.2.3" , ...<br>
'#Script Property=AppSet:"2.0.0.1"<br>
'#Script Include="FileNameToIncludeIntoProject"<br>
'#Script Source="Varname"  ' scripter will generate this variable that will contain the scripts Source Directory<br>
'Process a tokenized script line for #Script directives<br>
'This can be called by the users application to add property
'entries to a compiled script.<br>
GetProjectOptions
M
s

SetStartup
M

(StartupName)s
'Sets the startup Class/Module for a script
GetStartup
M
s

'Returns the startup class/module for a project
_put
M

(value)v(index)s
'Acts like an array of properties for the project
_get
M
v
(index)s
'acts like an array of porperties of the project
#ScriptSetAliasTable

C
'This will configure the reader to apply an alias to the Script input line
'Format is of each entry in this Collection.<br>
'key is the Symbol value to be replace
'value is the text to substitute in the collection.<br>
'If an alias is found and the last two characters of the key are ()
'then the line is checked for a following open brace
'and every value separated by a comma, is substitutes into the value string
'Up to a maximum of 20 parameters.<br>
'Aliases will only be applied once but will try all others each time until all have been applied 
'or there are no more matches.<br>
'
'* Examples<br>
'Defined as:<br>
'<p style = "margin-left: 40px">
'<code>
'   "SmallDog":"Animals.add(\"Dog\",\"Small\")"\
'   "Animal()":"Animals.add(&1,&2)"\ 
'</code></p><br>
'in program looks like : \
'<p style = "margin-left: 40px">
'<code>
'    Animal("dog","Big")\
'    SmallDog\
'</code></p><br>
'After being applied looks like:\
'<p style = "margin-left: 40px">
'<code>
'    Animals.add("Dog","Big")\
'    Animals.add(\"Dog\",\"Small\")\
'</code></p><br>
'
_call
M

(AliasList)Collection;
'Pass the provided alias list to the reader class.<br>
'Causing this alias list to be applied to each line of the 
'script being processed.
#ScriptSetKeywordFilter

C
'Allow user to define keyword filter, this allows the ability  to prevent certain functions from
'being used inside a script file. This only applies to Script Plugins.<br>
'This filter set is a set of regular expressions which will be used to match program lines.<br>
'Entry would be : <br>
'<p style = "margin-left: 40px">
'<code>
'      "Message if matched":"Regular expression"
'</code></p><br>
'Example:<br>
'<p style = "margin-left: 40px">
'<code>
' "File Write not permitted":\"\*Open\* For \*Write\"
'</code></p><br>
'to prevent opening a file for or input output would look like.
_Call
M

(KeyManagement)Collection;
'Set the keyword filter
Clear
M


'Clear the Script Filters
#ScriptSetPostProcessPlugins

C
'Post Process of Script as a whole After it is compiled.<br>
'This is called after the Script has been processed
'and before the compiler is called.
_call
M

(PostProgPlugins)Object[];
' Called to set up the post process table.<br>
' Each element of the table is called in order, in the
' post program process phase.
' Note:
'    Successive calls to this function
' are cumulative. Always adding new functions to the end of the list.
clear
M


'Clears the list of post process Plugins
HasPlugins
M
b

'Returns a boolean true if there are Post process call backs
#ScriptSetPreProcessPlugins

C
'Pre Process Call Backs are called by the Scripter<br>
'  Before the Code Is processed<br>
'  Before the line is processed<br>
'The Plugin is to an object with the following entry points<br>
'  Public sub PreProcessProgram(Program as string[]) string[]<br>
'  Public Sub PreProcessLine(sLine as string) as string<br>
'
'It is important to note that the PreProcessing will follow the order found
'in the PreProcessTables
_call
M

(PreProgramCalls)Object[];(PreLineCalls)Object[];
'This function sets the list of pre-process call backs<br>
'it has two input lists, one for the program call backs<br>
'and one for the line call backs
HasProgramPreProcess
M
b

'This functions Returns a boolean true if
'there are Program level pre-process Plugins.
HasLinePreProcess
M
b

'This functions Returns a boolean true if
'there are line level pre-process Plugins
Clear
M


'This Function Clears all pre-process tables
#ScripterExecute

C
'This class allows the execution of a Gambas script directly
'from a string buffer.<br>
'<p style="margin-left: 40px">
'<code>
'      Static Public Sub ScripterExecute( ScriptName As String, ScriptSource As String,\
'                           Optional CompileParameters As String[] = [],
'                                    ScriptParameters As String[] = [],
'                                    NoWait as Boolean = FALSE,
'                                    ExecPlugin as Object = NULL) As Variant.
'</code></p><br>
'The extra input Script name is used to create the
'cached compiled version of the script.<br>
'<hr>
'ScriptParameters are passed to the script as if you had included them in the command line.<br>
'* The simplest call would be:<br>
'<p style="margin-left: 40px">
'<code>
'ScripterExecute("MyScript", "for i as integer = 0 to 10\\nprint \\"hello\\";; i\\nnext")
'</code></p><br>
'
'**NoWait** will cause the Scripter to start the Script running and return without waiting for completion.\
'**ExecPlugin** if this parameter is provided then the Scripter will Call this objects to perform the actual execution of the script.\
' The plugin is provided with the command array and the nowait flag.\
' The Provided plugin must be defined as shown below:\
'<p style="margin-left: 40px">
'<code>
'Public Sub _Call(args as string[], NoWaitFlag) as variant
'</code></p><br>
'It will be this object's responsibility to EXEC and manage the script during its execution.\
'The Simplest Object definition being:\
'
'<code>
'Public Sub _Call(aArgs as string[], nowait as boolean) as variant
'     Dim Result as variant = 0
'     if NoWait then
'       EXEC aArgs
'     else
'     result =  EXEC aArgs Wait
'     endif
'     return result
'End
'</code><br>
CompileResult
V
v

'Contains any integer error returned from the gambas compiler.\
'The Text error is available through **ScriptCompileErrors()**
_call
M
v
(ScriptName)s(ScriptSource)s[(CompileParameters)String[];(ScriptParameters)String[];(NoWait)b(ExecPlugin)o(PluginParameters)Variant[];]
'Execute an in memory script from a string
#ScripterPlugin

C
'This returns the instantiated class as a Gambas object of the Compiled plugin script<br>
'If the load of the plugin fails then NULL is returned.<br>
'ScriptCompileErrors can be called to get the result of the compile.<br>
'The returned object may be called directly.<br>
'<p style="margin-left: 40px">
'<code>
'Static Public Sub ScripterPlugin( ScriptPath As String,
'                           Optional CompileParameters As String[] = [],
'                                    PluginNewParameters As Variant[] = Null ) As Variant
'</code></p><br>
'This allows integration of Gambas scripts into an executing application at run-time<br>
'* Loading Plugins from script files be like this example :<br>
'<p style="margin-left: 40px">
'<code>
'Dim myplugin As Object = ScripterPlugin(MyScript,["-b","-c"])\
'myPlugin()
'</code></p><br>
'Scripts may also be loaded as plugins directly for string buffers as well.<br>
'* The simplest use case would be:<br>
'<p style="margin-left: 40px">
'<code>
'Dim myplugin As Object = ScripterPlugin.FromString("Bozzo2", "for i as integer = 0 to 10\\nprint \\"hello\\";; i\\nnext")\
'myplugin()
'</code></p><br>
'
'When a script contains a _new() method that requires parameters during instantiation of the object then these can be passed
'in the call to plugin.<br>
'* Example of loading a plugin with parameters to _new()
'<p style="margin-left: 40px">
'<code>
'Dim myplugin As Object = ScripterPlugin(MyScript,["-b","-c"],["NewParm1","NewParm2","etc.."])\
'myPlugin()
'</code></p><br
CompileResult
V
i

'Contains any error returned from the Gambas compiler
'The Text error is available through ScriptCompileError()
_call
M
v
(ScriptPath)s[(CompileParameters)String[];(PluginNewParameters)Variant[];]
'Default call to this class requires a file name to be loaded as a plugin into the application<br>
'Returns an Gambas object upon successful build and load of the plugin<br>
'Returns Null upon failure
FromString
M
v
(PluginName)s(Program)s[(CompileParameters)String[];(PluginNewParameters)Variant[];]
'Allow a user to provide a string program and build it<br>
'Returns an Gambas object upon successful build and load of the plugin<br>
'Returns Null upon failure
SetVerbose
M


'Turn on verbose info during plugin compile\
'A wealth of debug and warning information will be displayed\
'onto stdout. This can also be done through the -v option on the call to
'ScriptPlugin()
#ScripterRun

C
'This class allows the execution of a Gambas script file directly.\
'The ScriptFile path may also point to a Gambas project directory, which will be run directly.
'<p style="margin-left: 40px">
'<code>
'Static Public Sub **ScripterRun**( **ScriptFile** as string,
'                               Optional CompileParameters As String[] = [] ,
'                                        ScriptParameters As String[] = [],
'                                        NoWait as Boolean = FALSE,
'                                        ExecPlugin as Object = NULL) As Variant.
'</code></p><br>
'<hr>
'ScriptParameters are passed to the script as if you had included them in the command line.<br>
'* The simplest call would be:<br>
'<p style="margin-left: 40px">
'<code>
'ScripterExecute("MyClass", "for i as integer = 0 to 10\\nprint \\"hello\\";; i\\nnext")
'</code></p><br>
'
'NoWait will cause the Scripter to start the Script running and return without waiting for completion
'ExecPlugin if this parameter is provided then the Scripter will Call the objects It Must have a _Call interface\
'and it must be defined as:<br>
'<p style="margin-left: 40px">
'<code>
'Public Sub _Call(args as string[], NoWaitFlag) as variant
'</code></p><br>
'It will be this object responsibility to EXEC the and manage the script during its execution.<br>
'The Simplest Object definition being:<br>
'<p style="margin-left: 40px">
'<code>
'Public Sub _Call(aArgs as string[], nowait as boolean) as variant\
'     Dim Result as variant = 0\
'    if NoWait then\
'      EXEC aArgs\
'    else\
'    result =  EXEC aArgs Wait\
'    endif\
'    return result\
'End
'</code></p><br>
CompileResult
V
v

'Contains any error returned from the Gambas compiler
'The error message  is available through ScriptCompileError() as a CompileErrorMsg object
_call
M
v
(ScriptFile)s[(CompileParameters)String[];(ScriptParameters)String[];(NoWait)b(ExecPlugin)o(PluginParameters)Variant[];]
'Execute a script File directly
#Verbose

C
'Called to write a message to the current error output sink.<br>
'Can be used by user Plugins to add information to output
'when the -v flag is sent as a parameter to the script being compiled.
$bVerboseOn
V
b

'Flag which can be used to set or unset verbose output
_Call
M

(sMsg)s
'sMsg is the message to written to the  error output
#Warning

C
'Called to write a warning level message to the current error output sink.<br>
'output is controlled by the -w flag when a compile is started<br>
'User Plugins can use this to add warnings to console output.
$bWarningOn
V
b

'Flag that can be set or unset to control warning message display
_Call
M

(sMsg)s[(bIsError)b]
'Called to place a compiler warning onto the error output stream
