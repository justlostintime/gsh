Sub lany(Optional Stype As String = "sub", dirbase As String = "subs") As Collection
'''Gets List of files from gsh system directories or local user directories
''lany(TypeOfFile,basDirectoryName) - Creates a collection from a subs directories
''          Returns a collections from the specified directories or in memory
''          namespace struct. or sub. or class.  types.
''          Defaults to the subs directory which includes Functions and Procedures
With sharedmem

    Dim GshLocalRoot As String = env["APPDIR"]
    Dim SearchBase As String = GshLocalRoot &/ "/usr/share/gsh"
    Dim tolist As New Collection
    Dim globdir As String[] = Dir(SearchBase &/ dirbase, "*", gb.file)
    Dim loadeddir As New String[]

'   Get list of all the subroutines/scripts already loaded into memory
    For Each sSyms As SharedMemSymbol In .SymbolTable
        If sSyms.symname Like sType & ".*" Then
            Try loadeddir.add(Split(sSyms.symname, ".")[1])
            If Error Then Error "lany " & error.text
        Endif
    Next

'   Get a list of all the default subroutines /scripts in the /usr/share/gsh installed suite

    For Each s As String In globdir
        If Not tolist.exist(s) Then tolist.add("", s)
        tolist[s] = ["Default", SearchBase &/ dirbase &/ s, s, "Default", stype]
    Next

'   Get a list of all the local user scripts

    Dim privateList As String[] = Split(sharedmem[dirbase & "Path"], ";")
    For Each sp As String In privateList
       Dim shortlist As String[]
       If Left(sp, SearchBase.len) == SearchBase Then Continue
       Try shortlist = Dir(sp, "*", gb.file)
       If Error Then Continue                                ' if the directory does not exsist then ignore it
       For Each s In shortlist
          tolist[s] = ["Personal", sp &/ s, s, "Personal", stype]
       Next
    Next

'   Go through each script identify source and status

    For Each s In loadeddir
        If tolist.exist(s) Then
          tolist[s][3] = "In-Mem"
        Else
          tolist[s] = ["In-Mem", sType & "." & s, s, "In-Mem", stype]
        Endif
    Next

'    for each sp as string[] in tolist
'      print tolist.key;;"=";;sp[1];;"in";;sp[0]
'    next

.["result"] = "OK"

End With

Return tolist

Catch
 Error "List Any ";; sp;; Error.where;; error.text
End