Sub fileexpand(path As String, Optional dironly As Boolean = False, globstar as boolean = sharedmem["globstar"],  Recurse as boolean = false ) As String[] ' list of file
'' fileexpand(Path as string, optional DirOnly as boolean) as string()
''   Returns a list of files as expanded by the shells
Extern glob(Pattern As String, flags As Integer, ErrorCallback As Pointer, glob_def As Glob_t) As Integer In "libc:6"
Extern globfree(glob_def As Glob_t) In "libc:6"

#if Version < "3.16.3"
Dim GLOB_ERR As Integer = Shl(1, 0)                     ' Return On Read errors. * /
Dim GLOB_MARK As Integer = Shl(1, 1)                    ' Append a slash To Each name. * /
Dim GLOB_NOSORT As Integer = Shl(1, 2)                  ' Don 't sort the names.  */
Dim GLOB_DOOFFS As Integer = Shl(1, 3)                  ' Insert PGLOB - > gl_offs NULLs. * /
Dim GLOB_NOCHECK As Integer = Shl(1, 4)                 ' If nothing matches, Return the pattern. * /
Dim GLOB_APPEND As Integer = Shl(1, 5)                  ' Append To results Of a previous call. * /
Dim GLOB_NOESCAPE As Integer = Shl(1, 6)                ' Backslashes don 't quote metacharacters.  */
Dim GLOB_PERIOD As Integer = Shl(1, 7)                  ' Leading `.' can be matched by metachars.  */
Dim GLOB_MAGCHAR As Integer = Shl(1, 8)                 ' Set In gl_flags If any metachars seen. * /
Dim GLOB_ALTDIRFUNC As Integer = Shl(1, 9)              ' Use gl_opendir et al functions. * /
Dim GLOB_BRACE As Integer = Shl(1, 10)                  ' Expand "{a,b}" To "a" "b". * /
Dim GLOB_NOMAGIC As Integer = Shl(1, 11)                ' If no magic chars, Return the pattern. * /
Dim GLOB_TILDE As Integer = Shl(1, 12)                  ' Expand ~user and ~ to home directories. */
Dim GLOB_ONLYDIR As Integer = Shl(1, 13)                ' Match only directories. * /
Dim GLOB_TILDE_CHECK As Integer = Shl(1, 14)
#else
Dim GLOB_ERR As Integer = 1 shl 0                     ' Return On Read errors. * /
Dim GLOB_MARK As Integer = 1 shl 1                    ' Append a slash To Each name. * /
Dim GLOB_NOSORT As Integer = 1 shl 2                  ' Don 't sort the names.  */
Dim GLOB_DOOFFS As Integer = 1 shl 3                  ' Insert PGLOB - > gl_offs NULLs. * /
Dim GLOB_NOCHECK As Integer = 1 shl 4                 ' If nothing matches, Return the pattern. * /
Dim GLOB_APPEND As Integer = 1 shl 5                  ' Append To results Of a previous call. * /
Dim GLOB_NOESCAPE As Integer = 1 shl 6                ' Backslashes don 't quote metacharacters.  */
Dim GLOB_PERIOD As Integer = 1 shl 7                  ' Leading `.' can be matched by metachars.  */
Dim GLOB_MAGCHAR As Integer = 1 shl 8                 ' Set In gl_flags If any metachars seen. * /
Dim GLOB_ALTDIRFUNC As Integer = 1 shl 9              ' Use gl_opendir et al functions. * /
Dim GLOB_BRACE As Integer = 1 shl 10                  ' Expand "{a,b}" To "a" "b". * /
Dim GLOB_NOMAGIC As Integer = 1 shl 11                ' If no magic chars, Return the pattern. * /
Dim GLOB_TILDE As Integer = 1 shl 12                  ' Expand ~user and ~ to home directories. */
Dim GLOB_ONLYDIR As Integer = 1 shl 13                ' Match only directories. * /
Dim GLOB_TILDE_CHECK As Integer = 1 shl 14
#endif

Dim globerrors As String[] = ["No error", "Out Of Memory", "Read Error", "No Matches", "Not Implemented"]
Dim Paths As New String[]
Dim sret As New Glob_t
Dim ReturnSet As Pointer
Dim CallResult As Integer
Dim flags As Integer = (GLOB_TILDE Or GLOB_MARK Or GLOB_NOCHECK Or GLOB_BRACE)

  if Recurse = false and if globstar = true then recurse = (path like "*\\*\\*.*")
  
  if dironly = true or if  path[path.len-1] = "/" Then
     dironly = true
     flags = (flags Or GLOB_ONLYDIR)
  Endif

  CallResult = glob(path, flags, Null, sret)
  
  If Callresult <> 0 Then
      Error.Raise("File Expansion Error :" & globerrors[CallResult])
  Endif
  
  ReturnSet = sret.gl_pathv
  
  For i As Integer = 0 To sret.gl_pathc - 1
    Dim rpath As String = String@(Pointer@(ReturnSet + (SizeOf(gb.pointer) * i)))
    if globstar then 
      If rpath[rpath.len - 1] = "*" Then
        Continue
      Endif
      Paths.Add(rpath)
      If recurse and rpath[rpath.len - 1] = "/" Then
        paths.Insert(fileexpand(rpath & "*", dironly, globstar, recurse))
      Endif
    Else
         Paths.Add(rpath)
    endif
  Next
  
  globfree(sret)
  
  Return paths 
  
Catch
  Error.Propagate()
  
End ' Gambas module file
