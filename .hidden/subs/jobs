Sub jobs(...) As Variant
''' Job Control - list of current BG jobs
'''               or turn job control on or off
''jobs <pid|on|off> prints a list of current background jobs
''          Or turns job control ON or OFF
''
''          This lists all the jobs currently running for a user
''          The list includes every instance of a task started by gsh for a user
''          It default is all user tasks or a pid can be provided for specific task
''          The paramters:
''                  -ON for turning on job control
''                  -OFF for turning off job control
''                  -Keep Keep information after reporting
''                  -Table return a table of all known tasks
''                  -Any list processes from all terminals/shells
''                  Default setting is job control off
''          job info can be accessed by Process
''		    using sharedmem["pid.p[processid]"] example sharedmem["pid.p098765"]
Extern waitpid(pid As Integer, status As Pointer, options As Integer) As Integer In "libc:6"
Extern strerror(errno As Integer) As String In "libc:6"
Dim Parms As New Parseparms(param.all, ["on": True, "off": True, "any": True, "all": True, "table": True, "keep": True], "Jobs")
Dim pidstatus As Integer = 0
Dim pidresult As Integer = 0
Dim pStatus As Pointer = VarPtr(pidstatus)
Dim Jobctl As Object
Dim cTable As New Collection
Dim Keep As Boolean = False
Dim Table As Boolean = False
Dim Any As Boolean = False
Dim DoPrint As Boolean = True

With sharedmem
    For Each Entry As Variant In Parms.Parms
      Select Case Upper(Parms.Parms.key)
        Case "ON"
          Try Jobctl = classes["gsh"]
          If Error Then
             error.raise("Unable to set Job control on when assigning values or called as function")
          Endif
          object.call(Jobctl, "setjobctl", [True])
          Return True
        Case "OFF"
          Try Jobctl = classes["gsh"]
          If Error Then
             error.raise("Unable to set Job control on when assigning values or called as function")
          Endif
          object.call(Jobctl, "setjobctl", [False])
          Return True
        Case "TABLE"
          DoPrint = False
          table = True
        Case "KEEP"
          Keep = True
        Case "ANY", "ALL"
          Any = True
        Default
          error.raise("Invalid jobs parameter " & Upper(Parms.Parms.key))
      End Select
    Next

    If Parms.Values.count > 0 Then                  ' asked about a specific pids, just process them
       For Each varname As String In parms.values
        Dim sPid As String = "pid.p" & varname & "a" & application.id
        If .exist(sPid) Then
          Print .[sPid]
        Else
          .["result"] = "Error : Process ID Not found [" & varname & "]"
          Print #file.err, .["result"]
          Return False
        Endif
      Next
      Return True
    Endif

    ' we get here if there are no specific pids that were requested, scan through the variable names looking for pid info
    For Each s As SharedMemSymbol In SharedMem.SymbolTable
      If Left(s.symname, 5) <> "pid.p" Then Continue
      If any = True Or If s.symname Like "pid.p*" & "a" & application.id Then
        Dim procsyms As String[]
        Dim cmd As String
        procsyms = Split(.[s.symname], "|\n", "", True)
        If procsyms.count >= 3 Then
          cmd = procsyms[2]
          If DoPrint Then
            Print procsyms[0];; procsyms[1];;
            Print "\x1b[33m";
          Endif
          If procsyms.count > 3 Then
            If DoPrint Then Print procsyms[3];; "\x1b[32m[Complete]\x1b[33m result="; procsyms[4];; "Duration="; (CDate(procsyms[3]) - CDate(procsyms[1])) * 100000;;
            If table Then cTable.add(["Complete", procsyms], procsyms[3])
            If Not keep Then .Free(s.symname)
          Else
            pidresult = waitpid(CInt(procsyms[0]), pStatus, 1)
            If pidresult >= 0 Then
              If DoPrint Then Print "\x1b[31m[Running]\x1b[33m";; pidstatus;; pidresult;;
              If Table Then cTable.add(["Runing", procsyms], procsyms[3])
            Else
              If DoPrint Then Print "\x1b[31m[Exited]\x1b[33m Status="; pidstatus;; pidresult;; system.error;; strerror(system.error);;
              If table Then cTable.add(["Exited", procsyms], procsyms[3])
              If Not keep Then .Free(s.symname)
            Endif
          Endif
        Else
          If DoPrint Then Print s.Symname;; "[Unknown]";; Process.LastValue;; procsyms.join("|");;
          If table Then cTable.add(["Unknown", procsyms], "Unknown" & procsyms[0])
          If Not keep Then .Free(s.symname)
        Endif
        If DoPrint Then Print "\x1b[0m"; cmd
      Endif
    Next

    .["result"] = "OK"

End With

If table Then
  Return cTable
Else
  Return True
Endif

Catch
   error.raise("Jobs Error: " & error.text & error.where)

End
