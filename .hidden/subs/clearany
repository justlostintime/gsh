sub ClearAny(objtype as string,parmset as string[])

Public  Verbose as boolean = false
Public  IgnoreErrors as boolean = false
Public  AutoSave as boolean = false
Public  NoSave as boolean = false
Public  allobjects as collection
Public  Locations as clollection = ["sub":"subs","class":"class","struct":"struct"]
dim     DoReturn as boolean = false

allobjects = lany(objtype,Locations[objtype])

if parmset.count <> 0 then
  for each objname as string in parmset
    if left(objname,2) = "--" then
      select case lower(right(objname,-2))
        case "verbose"
          Verbose = true
        case "ignoreerrors"
          ignoreerrors=true
        case "autosave"
          autosave = true
        Default
          print #file.err, "clear";objType;" Unknown option";;objname
          print #file.err, "Use : --IgnoreErrors - ignore and error"
          print #file.err, "      --Verbose      - Be verbose as to what is cleared or saved"
          print #file.err, "      --AutoSave     - automatically save any new or changed subs in the image"
          print #file.err, "      --NoSave       - Do not save any new or changed subs in image"
      end select
      continue
    endif

    if sharedmem.exist(objtype&"."&objname) then
        if haschanged(objtype,allobjects[objname]) then
           SaveToDisk(objtype,allobjects[objname],"New Version found Save to Disk ?")
        endif
        sharedmem.free(objtype&"."&objname)
        if Verbose then print #file.err, "Clear ";objtype;" :" ;;objname
        DoReturn = true
    else
        if not IgnoreErrors then print #file.err, "Clear ";objtype;"not found :";;objname
    endif

  next

  if DoReturn then
     return
  endif

endif

' Here is where we will use lany to save the sub

for each sEntry as string[] in allObjects

  if allObjects.key == "update" then continue
  'if allObjects.key == "clearclass" then continue     ' just for debugging this
  'if allObjects.key == "clearany" then continue       ' just for debugging this

  if sEntry[eSubInMem] = "In-Mem" then
    if verbose then  print #file.err, "In memory :";;sEntry[eSubPath] ' turn on for debug
    if sEntry[eSubSource] = "In-Mem" then
       SaveSubToDisk(AllSubs.key,"Clearsub: Sub '"&AllSubs.key&"' Not Saved, Do You want to save it now")
    else if file.load(sEntry[eSubPath]) <> sharedmem["sub."&allsubs.key] then
      SaveSubToDisk(allsubs.key,"Clearsub:"&sentry[eSubSource]&":"&sentry[eSubPath]&" '"&allsubs.key&"' Has changed, Would you like to save it")
    endif

    try sharedmem.free("sub."&allSubs.key)
    if error then
      if not IgnoreErrors then
          Print  #file.err, "ClearSubs :";;error.text;; error.where
          break
      endif
    else
      if Verbose then Print #file.err, "Clearsub:";;allsubs.key;;" removed from memory"
    endif
  endif
next

catch
 print #file.err, "ClearSubs Error :";;error.text;; error.where

end

' See SetDefaults for information regarding searchpaths
'.subspath = user.home &/ "vars/subs;" & user.home &/ "vars/games;/usr/share/gsh/subs"
'.classpath = user.home &/ "vars/class;/usr/share/gsh/class"
'.structpath = user.home &/ "vars/struct;/usr/share/gsh/struct"
'.scriptpath = user.home &/ "vars/struct;/usr/share/gsh/scripts"
Private Find_Object_Source(objType,objname) as string
    dim Look_In_Directory as string[] = split(sharedmem[objtype&"path"],";","\"",true)
    for each location as string in Look_In_Directory
      if exist(location &/ objname) then
         return location &/ objname 
      endif
    next
    return ""
end

Private sub Has_Changed(objtype as string, sentry as string[]) as boolean

end

Private Sub Savetodisk(objtype as string,ObjectName as string,msg as string) as boolean
'' return true upon success false otherwise
    dim answer as string
    if NoSave then return

    if autosave then
       goto DoSave
    endif

    ' Else we have to query if user want to save the sub to disk
    Print #file.err,msg;"[Y/n] ";

answerloop:

    line input answer
    if answer == "" or if left(answer,1)=="Y" or if left(answer,1)=="N" then
      if left(answer,1)=="N" then return true
      goto DoSave
    else
      Print #file.err, "Clear";objtype;;"Use: Yes, No or enter for yes"
      goto answerloop
    endif

DoSave:
    select case objtype
      case "sub"
        try savesubs(objname)
      case "class","struct"
        try saveclasses(objname)
      Default
         "Clear unsupported object type"
    end select
    if error and not IgnoreErrors then
      Print  #file.err, "Clear";objtype;;objname;", Error :";;error.text;; error.where
      return false
    endif
    return true

catch
 print #file.err, "Clear";objtype;";Save";;objname;" Error :";;error.text;; error.where
 return false
end

enum eSubSource, eSubPath, eobjname, eSubInMem