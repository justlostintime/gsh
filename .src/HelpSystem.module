' Gambas module file

Public GambasHelpUrls As String[] = ["https://gambaswiki.org/wiki/cat",
  "https://gambaswiki.org/wiki/lang",
  "https://gambaswiki.org/wiki/comp/gb",
  "https://gambaswiki.org/wiki/comp",
  "https://gambaswiki.org/wiki/comp/gb.qt4",
  "https://gambaswiki.org/wiki",
  "https://gambaswiki.org/wiki/def",
  "https://gambaswiki.org/wiki/error"]

Public GambasHelpList As New Collection(gb.ignorecase)
Public GshHelpList As New Collection(gb.ignorecase)
Public GambasHelpIndex As New String[]
Public GshHelpIndex As New String[]
Public SearchResults As New Collection(gb.ignorecase)
Public SearchIndex As New String[]
Public SearchCommand As String = ""

Public Sub LoadHelp()

  Dim Result As Collection
  Dim s As Variant

  If GambasHelpList.count = 0 Then

    For Each s In GambasHelpUrls
      Result = GetHtmlListAsText(s)
      AppendCollection(GambasHelpList, result)
    Next
    For Each s In GambasHelpList
      GambasHelpIndex.Add(GambasHelpList.key)
    Next

  Endif

  GshHelpList = gsh.GetAllThings()
  For Each s In GshHelpList
    GshHelpIndex.Add(GshHelpList.key)
  Next

End

Public Sub SearchHelp(Pattern As String, SourceDict As Collection, SourceIndex As String[]) ' output is added to SearchResults

  Dim index As Integer = 0

  While index >= 0 And index < SourceIndex.count
    index = SourceIndex.Find(Pattern, gb.like, index)
    If index < 0 Then Break
    SearchResults.Add(SourceDict[SourceIndex[index]], SourceIndex[index])
    Inc index
  Wend
  SearchIndex.Clear()
  For Each s As Variant In SearchResults
    SearchIndex.Add(SearchResults.key)
  Next
  SearchIndex.Sort()

End

Public Sub AskSearchItem() As Variant ' uses the search index

  Dim Index As Integer = 0
  Dim sIndex As String

  If SearchIndex.count = 0 Then Return ""
  If SearchIndex.count = 1 Then
    SearchCommand = SearchIndex[0]
    Return SearchResults[SearchIndex[0]]
  Endif
  Print "Please select Choice using number"
  For Each s As String In SearchIndex
    Print index; ")";; s
    Inc Index
  Next
  Line Input sIndex
  Try index = CInt(sIndex)
  If Error Then Return ""
  SearchCommand = SearchIndex[Index]
  Return SearchResults[SearchIndex[index]]

End

Public Sub AppendCollection(Dest As Collection, src As Collection)

  For Each s As String In src
    Dest.Add(s, src.key)
  Next

End

Public Sub GetHelpDetailedText(Command As String) As String

  Dim sSource As New HttpClient As "hclient"
  Dim buffer As String = ""
  Dim Result As Variant

  command = "*" & Replace(UnQuote(command), " ", "*") & "*"
  SearchResults.Clear()
  SearchHelp(command, GshHelpList, GshHelpIndex)
  SearchHelp(command, GambasHelpList, GambasHelpIndex)
  Result = AskSearchItem()
  Command = SearchCommand

  If TypeOf(Result) = gb.object Then
    buffer = Getlivehelp(helpgetfile(Result[1]), Command, False)
  Else If Result <> "" Then
    sSource.url = "https://gambaswiki.org" &/ Result
    sSource.async = False
    sSource.timeout = 5
    sSource.Get
    If sSource.status < 0 Then Return ""
    If Lof(sSource) Then
      buffer = Read #sSource, Lof(sSource)
    Else
      buffer = ""
    Endif
    buffer = GetHtmlPage(buffer, Command, False)
  Else
    Buffer = Result
  Endif

  Return Buffer

End

Public Sub GetHtmlListAsText(TheUrl As String) As Collection

  Dim sSource As New HttpClient As "hclient"
  Dim buffer As String
  Dim aTmps, aSets As String[]
  Dim result As New Collection(gb.ignorecase)

  sSource.url = TheUrl
  sSource.async = False
  sSource.timeout = 5
  sSource.Get

  If sSource.status < 0 Then Return ""
  If Lof(sSource) Then
    buffer = Read #sSource, Lof(sSource)
  Else
    buffer = ""
  Endif
  '"<a href=\"/wiki/cat/bit\">Bits Manipulation Functions</a><br>"
  If buffer <> "" And If Not (buffer Like "*This page does not exist*") Then
    atmps = Split(buffer, "\n\r", "\"\"", True, True)
    For Each s As String In atmps
      If s Begins "<a href=" Then
        aSets = Split(s, "<>=", "\"\"", True, True)
        aSets[2] = Replace(aSets[2], "amp;", "")
        If aSets[2] = "span class" Then
          aSets[2] = File.Name(UnQuote(aSets[1]))
        Endif
        If Right(aSets[2], 1) = "$" Then
          result.Add(UnQuote(aSets[1]), Left(aSets[2], -1))
        Endif
        result.Add(UnQuote(aSets[1]), aSets[2])
      Endif
    Next
  Endif

  Return Result

End

Public ReadBuffer As String = ""

Public Sub mProcget_read()

  Dim buffer As String

  buffer = Read #Last, -256
  ReadBuffer &= buffer

End

Private Sub GetLiveHelp(msymbol As String[], Title As String, Optional Summary As Boolean = False) As String

  Dim ch As New ConsoleHighlight
  'Dim ch As New Highlight
  Dim helptxt As String = ""
  Dim SynText As String = ""

  For Each sText As String In msymbol
    Dim Skey As String = Upper(Trim(sText))
    If sKey[0] = "'" Then Continue
    If RegExp.Match(sKey, ".*(?:SUB|CLASS|FUNCTION|PROCEDURE|STRUCT).*", RegExp.Caseless) Then
      'If skey Like ".*SUB.*" Or If sKey Like ".*CLASS.*" Or If skey Like ".*FUNCTION.*" Or If sKey Like ".*PROCEDURE.*" Then
      SynText = sText
      Break
    Endif
  Next
  If SynText = "" Then syntext = msymbol[0]
  If Summary = False Then
    helptxt = "NAME\n\t" & Upper(Title) & "\n\nSYNOPSIS\n\t" & SynText & "\n\nDESCRIPTION\n"
  Else
    helptxt = SynText
    Return ch.ToConsole(helptxt)
  Endif
  Dim s As String
  Dim b As String
  For Each s In msymbol
    If s Like "''*" Then
      b = Trim(Replace(s, "''", ""))
      If b <> "" Then HelpTxt &= "\t" & b & "\n"
      If summary Then Break
    Endif
  Next

  Return helpTxt
Catch
  Error.Propagate()

End

Public Sub AllHelp() As String

  Dim HelpTxt As String = ""
  Dim TmpBuffer As String[]
  Dim HelpList As New String[]

  HelpTxt = File.Load("/usr/share/gsh/doc/help.info")
  HelpTxt &= ("\nUseful included Functions and Classes these may be edited to your taste\n"
    "Functions Can be found in /usr/share/gsh/subs for Default versions or\n"
  "in ~/vars/subs for personal versions\n\n")

  For Each sv As String[] In GshHelpList
    helplist.Add(GshHelpList.key)
  Next

  helplist.Sort()

  For Each ss As String In helplist
    TmpBuffer = helpgetfile(GshHelpList[ss][1])
    Helptxt &= Getlivehelp(TmpBuffer, ss, True)
    helptxt &= "\n"
  Next

  helptxt &= "\nGambas Language Index\n\n"
  Helptxt &= SortedInCol(GambasHelpIndex)
  Return HelpTxt
Catch
  Error.Raise("Help System Error:" & ss)

End

Sub helpgetfile(path As String) As String[]

  Dim func As String

  If path[0] = "/" Then
    Try func = file.load(path)
    If Error Then
      Error ("unable to read ") & path
      Return Null
    Endif
  Else
    func = sharedmem[path]
  Endif
  'func = ConsoleHighlight.ToConsole(func)
  Return Split(func, "\n", "\"\"", False, True)

End

Public Sub SortedInCol(AList As String[]) As String

  Dim colcount As Integer = 0
  Dim colwidth As Integer = 0
  Dim colperiod As Integer = 0
  Dim CurrentElement As Integer = 0
  Dim allIndex As String[] = aList
  Dim Result As String = ""

  allindex.Sort()
  While allIndex[0][0] = "."
    allindex.Remove(0)
  Wend

  For Each ss As String In allindex
    If ss.len > colwidth Then colwidth = ss.len
  Next

  colwidth += 2

  colcount = CInteger(env["COLUMNS"]) / colwidth
  colperiod = allindex.count / colcount
  colperiod += IIf(allindex.count - (colcount * colperiod) > 0, 1, 0)
  For i As Integer = 0 To colperiod - 1
    For j As Integer = 0 To colcount - 1
      CurrentElement = i + (j * colperiod)
      If currentelement < allindex.count Then
        Result &= Left(allindex[CurrentElement] & Space(colwidth), colwidth)
      Endif
    Next
    Result &= "\n"
  Next

  Return Result

End

Public HelpFromHtml As String

Private Sub GetHtmlPage(sSource As String, CmdName As String, Optional DoPrint As Boolean = True) As String

  Dim mproc As Process
  Dim ch As New ConsoleHighlight

  helpfromhtml = ""
  If Not System.Exist("html2text") Then
    Print "Please install the application 'html2text'  in order to display full gambas help information"
    Print " source = " & CmdName
  Endif
  SharedMem["lasthtmlhelp"] = sSource
  mproc = Exec ["html2text", "-ascii", "-width", "80", "-nobs", "-style", "compact"] For Read Write As "mrProcget"

  Write #mproc, sSource
  ' Flush #mproc
  mproc.closeinput
  mproc.wait
  ' While mproc.state = Process.Running
  '   Wait 0
  ' Wend
  If process.LastValue <> 0 Then
    Print "Help Html conversion Failed "
    Return ""
  Endif

  SharedMem["lasthelp"] = helpfromhtml

  Dim Sections As New Collection(gb.ignorecase)
  Dim atmps As String[]
  Dim tmps As String
  Dim secBuf As String = ""
  Dim secName As String = ""
  Dim Command As String
  Dim GotCmd As Boolean = False
  Dim SectionIndex As New String[]

  tmps = Replace(helpfromhtml, "&#x27;", "'")
  atmps = Split(Replace(tmps, "\xc2\xa0", " "), "\n\r", "\"\"", True, True)
  For Each s As String In aTmps
    If Left(s, 4) = "****" Then
      If secName <> "" Then
        Sections.Add(secBuf, secName)
        SecBuf = ""
      Endif
      SectionIndex.Add(Trim(Replace(s, "*", "")))
      SecName = Replace(SectionIndex.last, " ", "")
      If GotCmd = False Then
        Command = secName
        Gotcmd = True
      Endif
    Else
      If secname <> "" Then secBuf &= s & "\n"
    Endif
  Next
  If secName <> "" Then
    Sections.Add(SecBuf, secName)
  Endif

  helpfromhtml = ""

  ' HelpFromHtml = "NAME\n\n\t" & Upper(CmdName) & "\n\nSYNOPSIS\n\n"
  ' tmps = Replace(Sections[Command], "[email_protected]", CmdName, gb.ignorecase)
  '
  ' HelpFromHtml &= tmps & "\n"
  '
  ' If Sections.Exist("errors") Or Sections.Exist("error") Then
  '   HelpFromHtml &= "\nERRORS\n\n"
  '   tmps = IIf(Sections.Exist("error"), Sections["error"], Sections["errors"])
  '   HelpFromHtml &= tmps
  ' Endif
  '
  ' If Sections.Exist("example") Or Sections.Exist("examples") Then
  '   HelpFromHtml &= "\nEXAMPLE\n\n"
  '   tmps = IIf(Sections.Exist("example"), Sections["example"], Sections["examples"])
  '   tmps = ch.ToConsole(tmps)
  '   HelpFromHtml &= tmps & "\n"
  ' Endif
  '
  ' If Sections.Exist("seealso") Then
  '   HelpFromHtml &= "\nSEE ALSO\n\n"
  '   HelpFromHtml &= Sections["seealso"]
  ' Endif


  HelpFromHtml = "NAME\n"
  For Each s As String In SectionIndex
    HelpFromHtml &= s & "\n"
    If s Like "Example" Or If s Like "Examples" Then
      HelpFromHtml &= ch.ToConsole(Sections[Replace(s, " ", "")])
    Else
      HelpFromHtml &= Sections[Replace(s, " ", "")]
    Endif
    HelpFromHtml &= "\n\n"
  Next

  If DoPrint Then
    Print helpfromhtml
  Endif

  Return helpfromhtml

End

Public Sub mrProcget_read()

  Dim buffer As String

  buffer = Read #Last, -256
  helpfromhtml &= buffer

End
