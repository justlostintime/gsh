' Gambas module file

''  Sets the defaults for all of the system variables
''  Uses values found in the system image if present
''  SetDefaults, configure the basic system at start
''  perform any conversion for new release database updates
Public Sub _Call()

  Dim tmpstring As String

  With sharedmem

    .["gshversion"] = gsh.$version                 ' ;Application.Version                                         ' Use this later on to do version update stuff and verify all running versions are compatable

    If Not .exist("profile") Then .["profile"] = False
    If Not .exist("globstar") Then .["globstar"] = False                  ' set to cause fileexpansion to see ** as meaning recurse, it dangerous
    If sharedmem.exist("$alias") Then
      SharedMem["alias"] = SharedMem["$alias"]
      SharedMem.Free("$alias")
    Else If Not .exist("alias") Then
      .["alias"] = New Collection
    Endif

    If Not .Exist("gshvarconverted") Then .["gshvarconverted"] = False                    ' indicate that the variables are not yet converted
    If Not .exist("blockindent") Or If .["blockindent"] = "" Then .["blockindent"] = "  "        ' this is the block indent characters for entering blocks of code
    If Not .Exist("history_expand") Then .["history_expand"] = False                                ' turns on bash style history expansion using the system readline call
    If Not .exist("helpuseshtml") Then .helpuseshtml = False                                        ' Help will do a popup help when html is found
    If Not .exist("execprog") Then .["execprog"] = "print \"Gambas Shell \""                      ' Used for debugging only
    If Not .exist("lastexecutedblock") Then .lastexecutedblock = "print \"hello world\""            ' Used for debugging only
    If Not .exist("executedblock") Then .lastexecutedblock = "print \"hello world\""                ' Used for debugging only
    If Not .exist("prompt") Then .prompt = gsh.DefaultPrompt
    If Not .exist("result") Then .result = "OK"
    If Not .exist("maxhistory") Then .maxhistory = 300                                        ' define the max history length
    If Not .exist("historycurrent") Then .historycurrent = 0                                  ' defines the current history level
    If Not .exist("history") Then .history = New Collection
    If Not .exist("editor") Then
      Try .editor = System.Find("nano")
      If Error Then
        Try .editor = System.Find("vi")
        If Error Then
          .editor = "/bin/ed"
        Endif
      Endif
    Endif
    If Not .exist("hexeditor") Then .hexeditor = "/usr/bin/hexedit"
    If Not .exist("helpdisplay") Then .helpdisplay = gsh.DefaultHelp
    If Not .exist("home") Then .home = user.home
    If Not .exist("hosttype") Then .hosttype = system.Architecture
    If Not .exist("hosthame") Then .hostname = system.host
    If Not .exist("term") Then .term = "xterm-256color"
    If Not .exist("newprofile") Then .newprofile = False
    If Not .exist("lambda") Then .lambda = ""
    If Not .Exist("noalias") Then .noalias = False
    If Not .Exist("noPreProcess") Then .noPreProcess = False
    If Not .Exist("subsPath") Then .subspath = user.home &/ "vars/subs;" & user.home &/ "vars/games;/usr/share/gsh/subs"
    If Not .exist("classPath") Then .classpath = user.home &/ "vars/class;/usr/share/gsh/class"
    If Not .Exist("structPath") Then .structpath = user.home &/ "vars/struct;/usr/share/gsh/struct"
    If Not .Exist("scriptpath") Then .scriptpath = user.home &/ "vars/struct;/usr/share/gsh/scripts"

    If Not .exist("DoTrace") Then               'the memory value always takes precidence
      .DoTrace = gsh.DoTrace
    Else
      If gsh.TraceState = -1 Then gsh.DoTrace = .DoTrace
    Endif

    If Not .Exist("TraceLevel") Then
      .TraceLevel = gsh.TraceLevel
    Else If gsh.TraceState = -1 Then
      gsh.TraceLevel = .TraceLevel
    Endif

    Dim tmppath As String[] = Split(Env["PATH"], ":", "\"", True, True)
    Dim newpath As String[] = Split(.["path"], ":", "\"", True, True)

    For Each tmpstring In newpath
      If Not tmppath.Exist(tmpstring) Then
        tmppath.Add(tmpstring, 0)
      Endif
    Next
    If Not tmppath.Exist("/usr/share/gsh/scripts") Then tmppath.add("/usr/share/gsh/scripts", 0)
    If Not tmppath.Exist(User.home &/ "vars/scripts") Then tmppath.add(User.home &/ "vars/scripts", 0)

    .["path"] = tmppath.Join(":")

    If Not .exist("env") Then
      .["env"] = ["PWD=" & .["pwd"], "PATH=" & .["path"], "HOME=" & .["home"], "TERM=" & .["term"], "HOSTTYPE=" & .["hosttype"], "HOSTHAME=" & .["hostname"], "LASTPLACEONEARTH=EndOfTheEarth"]
    Endif

    '   If gsh.bLogon Then
    Env["PATH"] = .path
    ' Endif
    .pwd = Env["PWD"]

    If .pwd = "" Then
      Env["PWD"] = User.Home
      .pwd = Env["PWD"]
    Endif

    .["baseenv"] = ["PWD=" & .["pwd"], "PATH=" & .["path"], "HOME=" & .["home"], "TERM=" & .["term"], "HOSTTYPE=" & .["hosttype"], "HOSTHAME=" & .["hostname"], "LASTPLACEONEARTH=EndOfTheEarth"]

    ' If Not .exist("jobctl") Then .["jobctl"] = False

    If Not .profile Then
      Try RunScript(User.home &/ "vars/profile.gsh")
      If Error Then
        Error "Compile On Start of profile.gsh Failed :"; Error.text
      Endif
      gsh.execbuffer = ""
      .profile = True
    Endif

    If Not gsh.bSingleuse Then
      .Sync(".", gsh.DefaultImageName)
    Endif

  Catch
    Dim etext As String = Error.text & Error.where
    Error.Propagate()
  End With

End

