' Gambas module file

Extern chdir(Dest As String) As Integer In "libc:6"
Use "/usr/lib/gambas3/westwood/sharedmem:3.19.gambas"
Class Sharedmem

Private cmdBuild As New String[]
Public mProcr4430 As Process
Public mProcr4431 As Process
'Private cmdBuild As New String[]
'Public mProcr4430 As Process

Sub ToStringArray(sResult As String[], ...)  'Change anything to string[]
  ''ToStringArray    Creat a string array the content of arrays or collections
  ''          or objects/classes with the special _print function
  ''          returns string[] if found, empty array otherwise
  ''          result contains the error text or "OK"

  Dim vParms As Variant[]

  With sharedmem
    vParms = param.all
    For Each v As Variant In vParms
      Select Case TypeOf(v)
        Case gb.object
          Select Case object.class(v).name
            Case "Variant[]"
              For Each vs As Variant In v
                sResult.insert(ToStringArray(v))
              Next

            Case "String[]", "Integer[]", "Float[]", "Long[]", "Short[]", "Single[]", "Pointer[]", "Byte[]", "Date[]"
              sResult.insert(v)

            Case "Boolean[]"
              For Each c As Boolean In v
                sResult.add(IIf(c = True, "True", "False"))
              Next

            Case "Collection"
              For Each vs In v
                sResult.add(Quote(v.Key) & ":")
                sResult.insert(ToStringArray(sResult, v))
              Next

            Case "Class"
              sresult.add("Class:" & v.name)
              sresult.add("Refs:" & v.count)
              For Each s As String In v.symbols
                sResult.add("Symbol:" & s)
              Next
              sResult.add("End Class")

            Default
              If object.class(v).exist("_export") Then
                v._export()
              Else
                sResult.add("Object:" & v)
              Endif
          End Select

        Case gb.class
          sresult.add("Class:" & v.name)
          sresult.add("Refs:" & v.count)
          For Each s As String In v.symbols
            sResult.add("Symbol:" & s)
          Next
          sResult.add("End Class")

        Case gb.boolean
          sResult.add(IIf(c = False, "False", "True"))

        Default
          Try sResult.add(v)
          If Error Then
            sResult.add(error.text)
          Endif

      End Select
    Next
  End With

End

Const Cmdr443 As String = "/bin/cat"
'Public mProcr4431 As Process

Public Sub mReadr4430_read()

  With sharedmem
    Dim sInput As String
    sInput = Read #Last, -256
    Write #mProcr4431, sInput
  End With

End

Public Sub mReadr4430_kill()

  With sharedmem
    If mCloser4431() Then mProcr4431.closeinput()
  End With

End

Public Sub mReadr4431_kill()

  With sharedmem
  End With

End

Public Sub mCloser4431() As Boolean

  Dim alivecount As Integer = 0
  Dim LastOne As Boolean = False

  If mProcr4430.state = process.running Then Inc alivecount
  If alivecount = 0 Then LastOne = True
  Return LastOne

End

Public Sub Main()

  Try chdir(env["PWD"])
  SharedMem.BeginNamed("briangsh", 4512000)
  With Sharedmem
    cmdBuild.clear()
    tostringarray(CmdBuild, Cmdr443)

    ''#cat#''

    mProcr4431 = Exec cmdBuild For Write As "mReadr4431"
    cmdBuild.clear()
    tostringarray(CmdBuild, Cmdr443, "--color=auto")

    ''#ls --color=auto#''

    mProcr4430 = Exec cmdBuild For Read As "mReadr4430"
    mProcr4431.wait()

  End With
  SharedMem.end()
Catch
  Error "gsh error:" & error.text

End
