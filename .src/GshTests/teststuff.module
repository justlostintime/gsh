' Gambas module file

'Extern chdir(path As String) As Integer In "libc:6"

Public Sub Main()

  Dim y As New Testclass
  Dim yy As Testclass
  Dim x As Process
  Dim o As Object
  Dim s As String = "float@ @{ }\"#'application.name'\" assdf #[\"this stuff\"] @[\"more stuff\"] integer@ @bogus >> > <> !! !> &> ^ mod"
  Dim sl As String[] = Highlight.Analyze(s)
  Dim i As Integer = 0

  For Each p As String In sl
    Print p; " = "; Highlight.Types[i]
    Inc i
  Next

  Print "Eval = "; Eval("application.name")

  o = Classes["String[]"].New()
  Print "component :";
  For Each sym As String In Classes["component"].symbols
    Print sym;;
  Next
  Print "\nclass :";
  For Each sym As String In Classes["class"].symbols
    Print sym;;
  Next
  Print "\nteststuff :";
  For Each sym As String In Classes["teststuff"].symbols
    Print sym;;
  Next
  Print

  Print ".... Done"
  Print "begin test object write"
  Dim ptrr As Pointer = Alloc(600)
  Dim mfile As File
  mfile = Open Memory ptrr For Write
  Write #mfile, y As Object
  Print "Before read object = ";; y()
  Close mfile
  mfile = Open Memory ptrr For Read
  yy = Read #mfile As Object
  Print "Object read output =";; yy()
  Free(ptrr)
  Print "Run exec more"

  x = Exec ["less"] For Write As "sample"
  x.begin
  Print #x, "hello there\n1\n2\n3\n4\n5\n6\n7\n8\n9\n0\n1\n2\n3\n4\n5\n6\n7\n8\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n0\n1\n2\n3\n4\n5\n6\n7\n8\nend"
  x.send
  x.close
  While x.State = Process.Running
    Wait 0
  Wend

  Print "Done process"
  Print "hello again"
  Dim col As New Collection
  col.Add("hello", "hello")

  With SharedMem
    .Begin(128000)
    .["col"] = col
    .["c"] = y
    Print "saved global"
    yy = .["c"]
    col = .["col"]
    Print col["hello"]
    .end()
  End With

  Dim var As String = "/usr/bin/a*"
  Dim pattern As String
  Dim files As String[]
  Dim rootdir As String = If(File.Dir(var) = "", "/home", File.Dir(var))
  files = Dir(rootdir, File.Name(var))
  While True
    Line Input var
    pattern = File.Name(var)
    var = File.Dir(var)
    Print "dir="; var;; "File="; pattern
    Try files = Dir(var, pattern)
    If Error Then
      Print Error.text
    Else
      Print files.Join("\n")
    Endif
  Wend
  Stop

End

Public Sub getenv() As String[]

  Dim senv As New String[]

  For Each s As String In Application.env
    senv.add(s & "=" & Application.Env[s])
  Next
  Return senv

End

Public Sub glob(path As String, Optional directoryonly As Boolean = False) As String[]

  Dim sPath As String = Trim(path)
  Dim sPathSplit As String[] = Split(spath, "/", "", True)
  Dim pwd As New String[]
  Dim expansion As String[]
  'Dim final As New String[]
  Dim i As Integer
  Dim sdir As String

  If file.isrelative(sPath) Then pwd.insert(Split(env["PWD"], "/", "", True))

  For i = 0 To sPathSplit.max
    Sdir = sPathSplit[i]

    If InStr(Sdir, "*") Then         ' we have an expansion
      expansion = Dir("/" & pwd.Join("/"), sdir, If(directoryonly = True, gb.directory, gb.directory + gb.file))

    Endif

    Select Case Sdir
      Case "~"
        If pwd.count = 0 Then pwd.insert(Split(user.home, "/", "", True))

      Case "."
        If pwd.count = 0 Then pwd.insert(Split(env["PWD"], "/", "", True))

      Case ".."
        If pwd.count > 0 Then pwd.Remove(pwd.max)

      Default
        pwd.add(sdir)

    End Select

    If Not Exist("/" & pwd.join("/")) Then
      Print #file.err, "Directory Not Found :["; "/" & pwd.join("/"); "]"
      '.["result"] = "Error : Directory Not Found :[" & "/" & pwd.join("/") & "]"
      Return
    Endif

  Next

End

Public Sub sample_write()

  Print "got write"
  Write #Last, "hello world"

End

Public Sub sample_read()

  Dim s As String

  Print "got read"
  s = Read #Last, -256
  Print s

End

Public Sub reset()

  Print "test"

End

